Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].
//注意，这里不是求交集，而是求相同部分。
Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
//方法一：也是使用map来进行判断 O(m+n)
class Solution {
public:
	vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
		//感觉跟判断是否同素异形体的算法很像，都是使用map
		map<int, int> save;
		vector<int> newnums1, newnums2, result;
		if (nums1.size() >= nums2.size()) {//必须要先判断两个数组的大小
			newnums1 = nums1;
			newnums2 = nums2;
		}
		else {
			newnums1 = nums2;
			newnums2 = nums1;
		}
		for (int &i : newnums1)
			if (save.count(i))
				++save[i];
			else
				save.insert(make_pair(i, 1));
		for(int &i:newnums2)
			if (save[i]!=0) {
				result.push_back(i);
				--save[i];
			}
		return result;
	}
};
